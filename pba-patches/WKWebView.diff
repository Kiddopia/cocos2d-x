From 6dd907a978b9eed2d19cc1297a2c7fcaa6c6bd11 Mon Sep 17 00:00:00 2001
From: Kaushik <>
Date: Tue, 21 Apr 2020 10:40:48 +0530
Subject: [PATCH] [iOS] using WkWebView instead of deprecated UIWebView

---
 cocos/ui/UIWebViewImpl-ios.mm | 180 ++++++++++++++++++----------------
 1 file changed, 97 insertions(+), 83 deletions(-)

diff --git a/cocos/ui/UIWebViewImpl-ios.mm b/cocos/ui/UIWebViewImpl-ios.mm
index 2ed5d885c0..d1b29a0e98 100644
--- a/cocos/ui/UIWebViewImpl-ios.mm
+++ b/cocos/ui/UIWebViewImpl-ios.mm
@@ -28,6 +28,10 @@
 // Webview not available on tvOS
 #if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS) && !defined(CC_TARGET_OS_TVOS)
 
+#import <WebKit/WKWebView.h>
+#import <WebKit/WKUIDelegate.h>
+#import <WebKit/WKNavigationDelegate.h>
+
 #include "ui/UIWebViewImpl-ios.h"
 #include "renderer/CCRenderer.h"
 #include "base/CCDirector.h"
@@ -36,30 +40,6 @@
 #include "platform/CCFileUtils.h"
 #include "ui/UIWebView.h"
 
-static std::string getFixedBaseUrl(const std::string& baseUrl)
-{
-    std::string fixedBaseUrl;
-    if (baseUrl.empty() || baseUrl.at(0) != '/') {
-        fixedBaseUrl = [[[NSBundle mainBundle] resourcePath] UTF8String];
-        fixedBaseUrl += "/";
-        fixedBaseUrl += baseUrl;
-    }
-    else {
-        fixedBaseUrl = baseUrl;
-    }
-    
-    size_t pos = 0;
-    while ((pos = fixedBaseUrl.find(" ")) != std::string::npos) {
-        fixedBaseUrl.replace(pos, 1, "%20");
-    }
-    
-    if (fixedBaseUrl.at(fixedBaseUrl.length() - 1) != '/') {
-        fixedBaseUrl += "/";
-    }
-    
-    return fixedBaseUrl;
-}
-
 @interface UIWebViewWrapper : NSObject
 @property (nonatomic) std::function<bool(std::string url)> shouldStartLoading;
 @property (nonatomic) std::function<void(std::string url)> didFinishLoading;
@@ -107,8 +87,9 @@ static std::string getFixedBaseUrl(const std::string& baseUrl)
 @end
 
 
-@interface UIWebViewWrapper () <UIWebViewDelegate>
-@property(nonatomic, retain) UIWebView *uiWebView;
+@interface UIWebViewWrapper () <WKUIDelegate, WKNavigationDelegate>
+@property(nonatomic) WKWebView *wkWebView;
+
 @property(nonatomic, copy) NSString *jsScheme;
 @end
 
@@ -123,7 +104,7 @@ static std::string getFixedBaseUrl(const std::string& baseUrl)
 - (instancetype)init {
     self = [super init];
     if (self) {
-        self.uiWebView = nil;
+        self.wkWebView = nil;
         self.shouldStartLoading = nullptr;
         self.didFinishLoading = nullptr;
         self.didFailLoading = nullptr;
@@ -132,56 +113,58 @@ static std::string getFixedBaseUrl(const std::string& baseUrl)
 }
 
 - (void)dealloc {
-    self.uiWebView.delegate = nil;
-    [self.uiWebView removeFromSuperview];
-    [self.uiWebView release];
-    self.uiWebView = nil;
+    self.wkWebView.UIDelegate = nil;
+    self.wkWebView.navigationDelegate = nil;
+    [self.wkWebView removeFromSuperview];
+    [self.wkWebView release];
+    self.wkWebView = nil;
     self.jsScheme = nil;
     [super dealloc];
 }
 
 - (void)setupWebView {
-    if (!self.uiWebView) {
-        self.uiWebView = [[UIWebView alloc] init];
-        self.uiWebView.delegate = self;
+    if (!self.wkWebView) {
+        self.wkWebView = [[WKWebView alloc] init];
+        self.wkWebView.UIDelegate = self;
+        self.wkWebView.navigationDelegate = self;
     }
-    if (!self.uiWebView.superview) {
+    if (!self.wkWebView.superview) {
         auto view = cocos2d::Director::getInstance()->getOpenGLView();
         auto eaglview = (CCEAGLView *) view->getEAGLView();
-        [eaglview addSubview:self.uiWebView];
+        [eaglview addSubview:self.wkWebView];
     }
 }
 
 - (void)setVisible:(bool)visible {
-    if (!self.uiWebView) {[self setupWebView];}
-    self.uiWebView.hidden = !visible;
+    if (!self.wkWebView) {[self setupWebView];}
+    self.wkWebView.hidden = !visible;
 }
 
 - (void)setBounces:(bool)bounces {
-  self.uiWebView.scrollView.bounces = bounces;
+  self.wkWebView.scrollView.bounces = bounces;
 }
 
 - (void)setOpacityWebView:(float)opacity {
-    if (!self.uiWebView) {[self setupWebView];}
-    self.uiWebView.alpha=opacity;
-    [self.uiWebView setOpaque:NO];
+    if (!self.wkWebView) { [self setupWebView]; }
+    self.wkWebView.alpha = opacity;
+    [self.wkWebView setOpaque:YES];
 }
 
 -(float) getOpacityWebView{
-    return self.uiWebView.alpha;
+    return self.wkWebView.alpha;
 }
 
 -(void) setBackgroundTransparent{
-    if (!self.uiWebView) {[self setupWebView];}
-    [self.uiWebView setOpaque:NO];
-    [self.uiWebView setBackgroundColor:[UIColor clearColor]];
+    if (!self.wkWebView) {[self setupWebView];}
+    [self.wkWebView setOpaque:NO];
+    [self.wkWebView setBackgroundColor:[UIColor clearColor]];
 }
 
 - (void)setFrameWithX:(float)x y:(float)y width:(float)width height:(float)height {
-    if (!self.uiWebView) {[self setupWebView];}
+    if (!self.wkWebView) {[self setupWebView];}
     CGRect newFrame = CGRectMake(x, y, width, height);
-    if (!CGRectEqualToRect(self.uiWebView.frame, newFrame)) {
-        self.uiWebView.frame = CGRectMake(x, y, width, height);
+    if (!CGRectEqualToRect(self.wkWebView.frame, newFrame)) {
+        self.wkWebView.frame = CGRectMake(x, y, width, height);
     }
 }
 
@@ -190,19 +173,26 @@ static std::string getFixedBaseUrl(const std::string& baseUrl)
 }
 
 - (void)loadData:(const std::string &)data MIMEType:(const std::string &)MIMEType textEncodingName:(const std::string &)encodingName baseURL:(const std::string &)baseURL {
-    [self.uiWebView loadData:[NSData dataWithBytes:data.c_str() length:data.length()]
+    auto path = [[NSBundle mainBundle] resourcePath];
+    path = [path stringByAppendingPathComponent:@(baseURL.c_str() )];
+    auto url = [NSURL fileURLWithPath:path];
+
+    [self.wkWebView loadData:[NSData dataWithBytes:data.c_str() length:data.length()]
                     MIMEType:@(MIMEType.c_str())
-            textEncodingName:@(encodingName.c_str())
-                     baseURL:[NSURL URLWithString:@(getFixedBaseUrl(baseURL).c_str())]];
+       characterEncodingName:@(encodingName.c_str())
+                     baseURL:url];
 }
 
 - (void)loadHTMLString:(const std::string &)string baseURL:(const std::string &)baseURL {
-    if (!self.uiWebView) {[self setupWebView];}
-    [self.uiWebView loadHTMLString:@(string.c_str()) baseURL:[NSURL URLWithString:@(getFixedBaseUrl(baseURL).c_str())]];
+    if (!self.wkWebView) {[self setupWebView];}
+    auto path = [[NSBundle mainBundle] resourcePath];
+    path = [path stringByAppendingPathComponent:@(baseURL.c_str() )];
+    auto url = [NSURL fileURLWithPath:path];
+    [self.wkWebView loadHTMLString:@(string.c_str()) baseURL:url];
 }
 
 - (void)loadUrl:(const std::string &)urlString cleanCachedData:(BOOL) needCleanCachedData {
-    if (!self.uiWebView) {[self setupWebView];}
+    if (!self.wkWebView) {[self setupWebView];}
     NSURL *url = [NSURL URLWithString:@(urlString.c_str())];
 
     NSURLRequest *request = nil;
@@ -211,83 +201,107 @@ static std::string getFixedBaseUrl(const std::string& baseUrl)
     else
         request = [NSURLRequest requestWithURL:url];
 
-    [self.uiWebView loadRequest:request];
+    [self.wkWebView loadRequest:request];
 }
 
-
-
 - (void)loadFile:(const std::string &)filePath {
-    if (!self.uiWebView) {[self setupWebView];}
+    if (!self.wkWebView) {[self setupWebView];}
     NSURL *url = [NSURL fileURLWithPath:@(filePath.c_str())];
     NSURLRequest *request = [NSURLRequest requestWithURL:url];
-    [self.uiWebView loadRequest:request];
+    [self.wkWebView loadRequest:request];
 }
 
 - (void)stopLoading {
-    [self.uiWebView stopLoading];
+    [self.wkWebView stopLoading];
 }
 
 - (void)reload {
-    [self.uiWebView reload];
+    [self.wkWebView reload];
 }
 
 - (BOOL)canGoForward {
-    return self.uiWebView.canGoForward;
+    return self.wkWebView.canGoForward;
 }
 
 - (BOOL)canGoBack {
-    return self.uiWebView.canGoBack;
+    return self.wkWebView.canGoBack;
 }
 
 - (void)goBack {
-    [self.uiWebView goBack];
+    [self.wkWebView goBack];
 }
 
 - (void)goForward {
-    [self.uiWebView goForward];
+    [self.wkWebView goForward];
 }
 
 - (void)evaluateJS:(const std::string &)js {
-    if (!self.uiWebView) {[self setupWebView];}
-    [self.uiWebView stringByEvaluatingJavaScriptFromString:@(js.c_str())];
+    if (!self.wkWebView) {[self setupWebView];}
+    [self.wkWebView evaluateJavaScript:@(js.c_str()) completionHandler:nil];
 }
 
 - (void)setScalesPageToFit:(const bool)scalesPageToFit {
-    if (!self.uiWebView) {[self setupWebView];}
-    self.uiWebView.scalesPageToFit = scalesPageToFit;
+// TODO: there is not corresponding API in WK.
+// https://stackoverflow.com/questions/26295277/wkwebview-equivalent-for-uiwebviews-scalespagetofit/43048514 seems has a solution,
+// but it doesn't support setting it dynamically. If we want to set this feature dynamically, then it will be too complex.
 }
 
 
 
-#pragma mark - UIWebViewDelegate
-- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
-    NSString *url = [[request URL] absoluteString];
-    if ([[[request URL] scheme] isEqualToString:self.jsScheme]) {
+#pragma mark - WKNavigationDelegate
+- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler {
+    NSString *url = [[[navigationAction request] URL] absoluteString];
+    if ([[[[navigationAction request] URL] scheme] isEqualToString:self.jsScheme]) {
         self.onJsCallback([url UTF8String]);
-        return NO;
+        decisionHandler(WKNavigationActionPolicyCancel);
+        return;
     }
     if (self.shouldStartLoading && url) {
-        return self.shouldStartLoading([url UTF8String]);
+        if (self.shouldStartLoading([url UTF8String]) )
+            decisionHandler(WKNavigationActionPolicyAllow);
+        else
+            decisionHandler(WKNavigationActionPolicyCancel);
+
+        return;
     }
-    return YES;
+
+    decisionHandler(WKNavigationActionPolicyAllow);
 }
 
-- (void)webViewDidFinishLoad:(UIWebView *)webView {
+- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation {
     if (self.didFinishLoading) {
-        NSString *url = [[webView.request URL] absoluteString];
+        NSString *url = [webView.URL absoluteString];
         self.didFinishLoading([url UTF8String]);
     }
 }
 
-- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {
+- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation withError:(NSError *)error {
     if (self.didFailLoading) {
-        NSString *url = error.userInfo[NSURLErrorFailingURLStringErrorKey];
-        if (url) {
-            self.didFailLoading([url UTF8String]);
+        NSString *errorInfo = error.userInfo[NSURLErrorFailingURLStringErrorKey];
+        if (errorInfo) {
+            self.didFailLoading([errorInfo UTF8String]);
         }
     }
 }
 
+#pragma WKUIDelegate
+
+// Implement js alert function.
+- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)())completionHandler
+{
+    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:message
+                                                                             message:nil
+                                                                      preferredStyle:UIAlertControllerStyleAlert];
+    [alertController addAction:[UIAlertAction actionWithTitle:@"Ok"
+                                                        style:UIAlertActionStyleCancel
+                                                      handler:^(UIAlertAction *action) {
+                                                          completionHandler();
+                                                      }]];
+
+    auto rootViewController = [UIApplication sharedApplication].keyWindow.rootViewController;
+    [rootViewController presentViewController:alertController animated:YES completion:^{}];
+}
+
 @end
 
 
-- 
2.31.0

